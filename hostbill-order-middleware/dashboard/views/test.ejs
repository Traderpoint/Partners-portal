<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Middleware API Tester</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 2px solid #ecf0f1;
            border-radius: 5px;
            font-size: 14px;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
        }
        
        button:hover {
            background: #2980b9;
        }
        
        .btn-secondary {
            background: #95a5a6;
        }
        
        .btn-secondary:hover {
            background: #7f8c8d;
        }
        
        .response-container {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .quick-tests {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .quick-test-btn {
            padding: 10px;
            background: #2ecc71;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .quick-test-btn:hover {
            background: #27ae60;
        }
        
        .nav-links a {
            color: #3498db;
            text-decoration: none;
            margin-right: 20px;
            font-weight: bold;
        }
        
        .status-success {
            color: #2ecc71;
            font-weight: bold;
        }
        
        .status-error {
            color: #e74c3c;
            font-weight: bold;
        }
        
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ Middleware API Tester</h1>
            <p>Test middleware endpoints at: <strong><%= middlewareUrl %></strong></p>
            <div class="nav-links">
                <a href="/">üìä Dashboard</a>
                <a href="/test">üß™ Test API</a>
                <a href="/api/health">üíö Health Check</a>
                <a href="http://localhost:3000/middleware-dashboard" target="_blank">üìä Basic Dashboard</a>
            </div>
        </div>

        <!-- Quick Tests -->
        <div class="card">
            <h3>‚ö° Quick Tests</h3>
            <div class="quick-tests">
                <button class="quick-test-btn" onclick="quickTest('/health', 'GET')">Health Check</button>
                <button class="quick-test-btn" onclick="quickTest('/api/products/all', 'GET')">All Products</button>
                <button class="quick-test-btn" onclick="quickTest('/api/affiliates', 'GET')">All Affiliates</button>
                <button class="quick-test-btn" onclick="quickTest('/api/affiliate/2', 'GET')">Affiliate ID 2</button>
                <button class="quick-test-btn" onclick="quickTest('/api/payment-modules', 'GET')">Payment Modules</button>
                <button class="quick-test-btn" onclick="quickTest('/api/affiliate/2/products', 'GET')">Affiliate Products</button>
            </div>
        </div>

        <!-- Custom Test Form -->
        <div class="card">
            <h3>üîß Custom API Test</h3>
            <form id="testForm">
                <div class="form-group">
                    <label for="endpoint">Endpoint:</label>
                    <input type="text" id="endpoint" name="endpoint" placeholder="/health" value="/health">
                </div>
                
                <div class="form-group">
                    <label for="method">Method:</label>
                    <select id="method" name="method">
                        <option value="GET">GET</option>
                        <option value="POST">POST</option>
                        <option value="PUT">PUT</option>
                        <option value="DELETE">DELETE</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="data">Request Data (JSON):</label>
                    <textarea id="data" name="data" rows="6" placeholder='{"key": "value"}'></textarea>
                </div>
                
                <button type="submit">üöÄ Send Request</button>
                <button type="button" class="btn-secondary" onclick="clearResponse()">üóëÔ∏è Clear Response</button>
            </form>
        </div>

        <!-- Response -->
        <div class="card">
            <h3>üìã Response</h3>
            <div id="responseStatus"></div>
            <div id="response" class="response-container">
                Click "Send Request" or use Quick Tests to see response here...
            </div>
        </div>

        <!-- Sample Requests -->
        <div class="card">
            <h3>üìñ Sample Requests</h3>
            <h4>Order Creation Test:</h4>
            <button class="btn-secondary" onclick="loadOrderSample()">Load Order Sample</button>
            <pre style="background: #f8f9fa; padding: 10px; border-radius: 5px; margin-top: 10px; font-size: 12px;">
POST /api/process-order
{
  "customer": {
    "firstName": "Test",
    "lastName": "User",
    "email": "test@example.com",
    "phone": "+420123456789",
    "address": "Test Address 123",
    "city": "Praha",
    "postalCode": "12000",
    "country": "CZ"
  },
  "items": [{
    "productId": "1",
    "name": "VPS Test",
    "price": 100,
    "cycle": "m",
    "configOptions": {
      "os": "ubuntu",
      "ram": "4GB",
      "cpu": "2"
    }
  }],
  "affiliate": {"id": "2"},
  "paymentMethod": "banktransfer",
  "total": 100,
  "source": "dashboard_test"
}
            </pre>
        </div>
    </div>

    <script>
        const form = document.getElementById('testForm');
        const responseDiv = document.getElementById('response');
        const responseStatus = document.getElementById('responseStatus');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const endpoint = document.getElementById('endpoint').value;
            const method = document.getElementById('method').value;
            const dataText = document.getElementById('data').value;
            
            let data = null;
            if (dataText.trim()) {
                try {
                    data = JSON.parse(dataText);
                } catch (error) {
                    responseDiv.textContent = 'Invalid JSON in request data: ' + error.message;
                    responseStatus.innerHTML = '<span class="status-error">‚ùå JSON Error</span>';
                    return;
                }
            }
            
            await sendRequest(endpoint, method, data);
        });

        async function sendRequest(endpoint, method, data) {
            const submitBtn = document.querySelector('button[type="submit"]');
            submitBtn.classList.add('loading');
            submitBtn.textContent = '‚è≥ Sending...';
            
            responseDiv.textContent = 'Sending request...';
            responseStatus.innerHTML = '<span>‚è≥ Loading...</span>';
            
            try {
                const response = await fetch('/api/test/middleware', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        endpoint,
                        method,
                        data
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    responseStatus.innerHTML = `<span class="status-success">‚úÖ Success (${result.status})</span>`;
                    responseDiv.textContent = JSON.stringify(result.data, null, 2);
                } else {
                    responseStatus.innerHTML = `<span class="status-error">‚ùå Error (${result.status || 'Unknown'})</span>`;
                    responseDiv.textContent = `Error: ${result.error}\n\nResponse: ${JSON.stringify(result.data, null, 2)}`;
                }
            } catch (error) {
                responseStatus.innerHTML = '<span class="status-error">‚ùå Network Error</span>';
                responseDiv.textContent = 'Network error: ' + error.message;
            } finally {
                submitBtn.classList.remove('loading');
                submitBtn.textContent = 'üöÄ Send Request';
            }
        }

        function quickTest(endpoint, method) {
            document.getElementById('endpoint').value = endpoint;
            document.getElementById('method').value = method;
            document.getElementById('data').value = '';
            sendRequest(endpoint, method, null);
        }

        function clearResponse() {
            responseDiv.textContent = 'Response cleared...';
            responseStatus.innerHTML = '';
        }

        function loadOrderSample() {
            document.getElementById('endpoint').value = '/api/process-order';
            document.getElementById('method').value = 'POST';
            document.getElementById('data').value = JSON.stringify({
                "customer": {
                    "firstName": "Test",
                    "lastName": "Dashboard",
                    "email": "test-dashboard@example.com",
                    "phone": "+420123456789",
                    "address": "Test Address 123",
                    "city": "Praha",
                    "postalCode": "12000",
                    "country": "CZ"
                },
                "items": [{
                    "productId": "1",
                    "name": "VPS Dashboard Test",
                    "price": 100,
                    "cycle": "m",
                    "configOptions": {
                        "os": "ubuntu",
                        "ram": "4GB",
                        "cpu": "2"
                    }
                }],
                "affiliate": {"id": "2"},
                "paymentMethod": "banktransfer",
                "total": 100,
                "source": "dashboard_test"
            }, null, 2);
        }
    </script>
</body>
</html>
